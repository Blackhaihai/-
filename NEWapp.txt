使用Python为基础做一个web后台，使用HTML网页访问上传图片限制图片的大小为1m一下而且识别图片的多个特定文字如"测试文字1""小特定文字"若该图片不存在不满足同时存在所有特定文字则无法上传，上传的html文件需要输入"姓名" "班级" "身份证号码" 然后上传图片 ，图片在传到后台后存在"allimg"的文件夹里面，并且在"imgalllog.log"文件中按照上传格式保存日志例子是"姓名"+"身份证号"+"时间"+图片路径 ，并且可以通过网站的子页面"allimg.html"查看到当前所有已经上传的日志和图片以表格形式呈现

好的，这是一个涉及前后端开发的任务，需要分步

在命令行中执行以下命令安装 Flask：
 
pip install Flask
 
接下来，我们需要创建一个简单的 Flask 应用。

创建一个名为  app.py  的文件，并添加以下代码：
 
from flask import Flask, request, render_template, redirect, url_for
import os
from PIL import Image
import io
import logging
from datetime import datetime

app = Flask(__name__)

# 设置上传文件夹
UPLOAD_FOLDER = 'allimg'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# 设置日志文件
LOG_FILENAME = 'imgall.log'
logging.basicConfig(filename=LOG_FILENAME, level=logging.INFO)

# 允许上传的图片格式
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# 检查图片大小和内容
def check_image(image_stream):
    img = Image.open(image_stream)
    # 检查图片内容，这里只是示例，你需要根据需求实现特定文字的识别逻辑
    # 比如使用pytesseract库进行文字识别
    text = pytesseract.image_to_string(img)
    if "测试文字1" in text and "小特定文字" in text:
        return True
    else:
        return False

# 检查文件类型和大小
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # 检查是否上传了文件
        if 'file' not in request.files:
            return redirect(request.url)
        file = request.files['file']
        # 如果用户没有选择文件，浏览器也会
        # 发送一个没有文件名的文件，需要特判
        if file.filename == '':
            return redirect(request.url)
        if file and allowed_file(file.filename) and file.content_length < 1048576:  # 01MB
            # 检查图片内容
            in_mem_file = io.BytesIO()
            file.save(in_mem_file)
            in_mem_file.seek(0)
            if check_image(in_mem_file):
                # 保存文件
                filename = secure_filename(file.filename)
                save_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(save_path)
                # 记录日志
                logging.info('{}\t{}\t{}\t{}'.format(request.form['name'], request.form['id'], datetime.now(), save_path))
                return '文件上传成功'
            else:
                return '图片内容不符合要求'
        else:
            return '文件大小或类型不符合要求'
    return render_template('upload.html')

if __name__ == '__main__':
    app.run(debug=True)
 
在上面的代码中，我们首先导入了必要的库，并创建了一个 Flask 应用。我们定义了一个  UPLOAD_FOLDER  变量，指定了上传文件保存的路径，以及一个  LOG_FILENAME  变量，指定了日志文件的保存路径。

 check_image  函数用于检查图片内容，你需要根据需求实现特定文字的识别逻辑。这里只是示例，我并没有引入  pytesseract  库，如果你需要文字识别功能，请安装并导入该库，并相应地修改  check_image  函数。

 allowed_file  函数用于检查文件类型。

在  upload_file  函数中，我们首先检查了请求的方法是否为 POST，然后检查了是否上传了文件，以及文件是否符合要求。如果文件符合要求，我们将其保存到指定的路径，并记录日志。

最后，我们运行了 Flask 应用。

现在，我们需要创建一个 HTML 文件，让用户能够上传文件。在同一个目录下创建一个名为  upload.html  的文件，并添加以下代码：
 
<!doctype html>
<html>
  <head>
    <title>上传文件</title>
  </head>
  <body>
    <h1>上传文件</h1>
    <form method="post" enctype="multipart/form-data">
      姓名：<input type="text" name="name"><br>
      班级：<input type="text" name="class"><br>
      身份证号码：<input type="text" name="id"><br>
      文件：<input type="file" name="file"><br>
      <input type="submit" value="上传">
    </form>
  </body>
</html>
 
在上面的代码中，我们创建了一个简单的表单，让用户能够输入姓名、班级、身份证号码
